peewee是一款轻量级、丰富的ORM（Object Relation Mapping，对象关系映射），支持postgresql、mysql和sqlite，如SqliteDatabase（file or memory）、MySQLDatabase、PostgresqlDatabase；
下面主要介绍SqliteDatabase的简单用法


模型定义
  模型类，字段实例和模型实例对应数据库概念：
     事物--------对应
    模型类      数据库表
    字段实例    数据库表的列
    模型实例    数据库表的行


创建数据库
import peewee
#sqllite
connect=peewee.SqliteDatabase('xxx.db')

#mysql
connect=peewee.MySQLDatabase(
    database='xxx',
    host='127.0.0.1',
    passwd='root',
    user='root',
    port=3306
)

class Teacher(peewee.Model):
    name=peewee.CharField(max_length=50) #varchar(50)
    age=peewee.IntegerField()            #int
    birthday=peewee.DateTimeField()      #时间格式
	
    class Meta:
        database=connect #这个Teacher模型使用"xxx"数据库

#创建表		
数据库内创建表来存储数据：这会创建表包含适当的列，索引，序列和外键限制：
Teacher.create_table()
或
connect.create_table(Teacher)
或
connect.create_tables([Teacher] #可同时创建多个

#增
填充数据库，我们将会使用save()、execute()或create()方法来添加和更新表的记录
T=Teacher()
T.name='zhangsan'
T.age=20
T.birthday=datetime.datetime.now()
T.save()
或
T=Teacher(name='lisi',age='40',birthday=datetime.datetime.now())
T.save()
或
T=Teacher().insert(name='wangwu',age=80,birthday=datetime.datetime.now())
T.execute()
或
T=Teacher.create(name='maliu',age=32,birthday=datetime.datetime.now())

#删
T=Teacher.delete().where(Teacher.name=='zhangsan')
T.execute()
或
T=Teacher.get(name='lisi')
T.delete_instance()

#改
T=Teacher.update(age=100).where(Teacher.name=='wangwu')
或
T=Teacher().get(name='wangwu')
T.age=101
T.save()

#查
#查询所有记录
T_list=Teacher.select()
for T in T_list:
	print T.name,T.age,T.birthday
#查多条
T_list=Teacher.select().where(Teacher.age==20)
for T in T_list:
	print T.name,T.age,T.birthday
#查单条
T_list=Teacher.select().where(Teacher.name=='wangwu')  #返回是list
for T in T_list:
	print T.name,T.age,T.birthday
或
T=Teacher.select().where(Teacher.name=='zhangsan').get() #返回时单个
print T.name,T.age,T.birthday
或
T=Teacher.get(Teacher.name=='zhangsan')
print T.name, T.age, T.birthday

#sql语句查询
sql = "select * from teacher where name = 'zhangsan' and age = 20"
T_list=Teacher.raw(sql)
for T in T_list:
	print T.name,T.age,T.birthday

下面看看MySQLdb直接操作数据库的介绍
'''
import MySQLdb
#创建连接
connect = MySQLdb.connect('127.0.0.1','root','666666','peewee')
	#数据库地址
	#数据库用户名
	#数据库密码
	#数据库名
#创建操作游标
cursor = connect.cursor()
	#是一个内存，里面存放Python给mysql的命令和返回结果
#执行sql
sql = "select user,password,host from mysql.user;" #查询授权用户
cursor.execute(sql)
data = cursor.fetchall() #查询所有
print data
#关闭游标
cursor.close()
#提交修改
connect.commit()
#关闭连接
connect.close()
'''